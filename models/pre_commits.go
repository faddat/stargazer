// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PreCommit is an object representing the database table.
type PreCommit struct {
	ID                 int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Height             int       `boil:"height" json:"height" toml:"height" yaml:"height"`
	Round              int       `boil:"round" json:"round" toml:"round" yaml:"round"`
	ValidatorAddress   string    `boil:"validator_address" json:"validatorAddress" toml:"validatorAddress" yaml:"validatorAddress"`
	PreCommitTimestamp time.Time `boil:"pre_commit_timestamp" json:"preCommitTimestamp" toml:"preCommitTimestamp" yaml:"preCommitTimestamp"`
	VotingPower        int       `boil:"voting_power" json:"votingPower" toml:"votingPower" yaml:"votingPower"`
	ProposerPriority   int       `boil:"proposer_priority" json:"proposerPriority" toml:"proposerPriority" yaml:"proposerPriority"`
	CreatedAt          time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	DeletedAt          null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *preCommitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L preCommitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PreCommitColumns = struct {
	ID                 string
	Height             string
	Round              string
	ValidatorAddress   string
	PreCommitTimestamp string
	VotingPower        string
	ProposerPriority   string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	Height:             "height",
	Round:              "round",
	ValidatorAddress:   "validator_address",
	PreCommitTimestamp: "pre_commit_timestamp",
	VotingPower:        "voting_power",
	ProposerPriority:   "proposer_priority",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

// Generated where

var PreCommitWhere = struct {
	ID                 whereHelperint
	Height             whereHelperint
	Round              whereHelperint
	ValidatorAddress   whereHelperstring
	PreCommitTimestamp whereHelpertime_Time
	VotingPower        whereHelperint
	ProposerPriority   whereHelperint
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"pre_commits\".\"id\""},
	Height:             whereHelperint{field: "\"pre_commits\".\"height\""},
	Round:              whereHelperint{field: "\"pre_commits\".\"round\""},
	ValidatorAddress:   whereHelperstring{field: "\"pre_commits\".\"validator_address\""},
	PreCommitTimestamp: whereHelpertime_Time{field: "\"pre_commits\".\"pre_commit_timestamp\""},
	VotingPower:        whereHelperint{field: "\"pre_commits\".\"voting_power\""},
	ProposerPriority:   whereHelperint{field: "\"pre_commits\".\"proposer_priority\""},
	CreatedAt:          whereHelpertime_Time{field: "\"pre_commits\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"pre_commits\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"pre_commits\".\"deleted_at\""},
}

// PreCommitRels is where relationship names are stored.
var PreCommitRels = struct {
	Validator string
}{
	Validator: "Validator",
}

// preCommitR is where relationships are stored.
type preCommitR struct {
	Validator *Validator `boil:"Validator" json:"Validator" toml:"Validator" yaml:"Validator"`
}

// NewStruct creates a new relationship struct
func (*preCommitR) NewStruct() *preCommitR {
	return &preCommitR{}
}

// preCommitL is where Load methods for each relationship are stored.
type preCommitL struct{}

var (
	preCommitAllColumns            = []string{"id", "height", "round", "validator_address", "pre_commit_timestamp", "voting_power", "proposer_priority", "created_at", "updated_at", "deleted_at"}
	preCommitColumnsWithoutDefault = []string{"height", "round", "validator_address", "pre_commit_timestamp", "voting_power", "proposer_priority", "deleted_at"}
	preCommitColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	preCommitPrimaryKeyColumns     = []string{"id"}
)

type (
	// PreCommitSlice is an alias for a slice of pointers to PreCommit.
	// This should generally be used opposed to []PreCommit.
	PreCommitSlice []*PreCommit
	// PreCommitHook is the signature for custom PreCommit hook methods
	PreCommitHook func(context.Context, boil.ContextExecutor, *PreCommit) error

	preCommitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	preCommitType                 = reflect.TypeOf(&PreCommit{})
	preCommitMapping              = queries.MakeStructMapping(preCommitType)
	preCommitPrimaryKeyMapping, _ = queries.BindMapping(preCommitType, preCommitMapping, preCommitPrimaryKeyColumns)
	preCommitInsertCacheMut       sync.RWMutex
	preCommitInsertCache          = make(map[string]insertCache)
	preCommitUpdateCacheMut       sync.RWMutex
	preCommitUpdateCache          = make(map[string]updateCache)
	preCommitUpsertCacheMut       sync.RWMutex
	preCommitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var preCommitBeforeInsertHooks []PreCommitHook
var preCommitBeforeUpdateHooks []PreCommitHook
var preCommitBeforeDeleteHooks []PreCommitHook
var preCommitBeforeUpsertHooks []PreCommitHook

var preCommitAfterInsertHooks []PreCommitHook
var preCommitAfterSelectHooks []PreCommitHook
var preCommitAfterUpdateHooks []PreCommitHook
var preCommitAfterDeleteHooks []PreCommitHook
var preCommitAfterUpsertHooks []PreCommitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PreCommit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PreCommit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PreCommit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PreCommit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PreCommit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PreCommit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PreCommit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PreCommit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PreCommit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preCommitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPreCommitHook registers your hook function for all future operations.
func AddPreCommitHook(hookPoint boil.HookPoint, preCommitHook PreCommitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		preCommitBeforeInsertHooks = append(preCommitBeforeInsertHooks, preCommitHook)
	case boil.BeforeUpdateHook:
		preCommitBeforeUpdateHooks = append(preCommitBeforeUpdateHooks, preCommitHook)
	case boil.BeforeDeleteHook:
		preCommitBeforeDeleteHooks = append(preCommitBeforeDeleteHooks, preCommitHook)
	case boil.BeforeUpsertHook:
		preCommitBeforeUpsertHooks = append(preCommitBeforeUpsertHooks, preCommitHook)
	case boil.AfterInsertHook:
		preCommitAfterInsertHooks = append(preCommitAfterInsertHooks, preCommitHook)
	case boil.AfterSelectHook:
		preCommitAfterSelectHooks = append(preCommitAfterSelectHooks, preCommitHook)
	case boil.AfterUpdateHook:
		preCommitAfterUpdateHooks = append(preCommitAfterUpdateHooks, preCommitHook)
	case boil.AfterDeleteHook:
		preCommitAfterDeleteHooks = append(preCommitAfterDeleteHooks, preCommitHook)
	case boil.AfterUpsertHook:
		preCommitAfterUpsertHooks = append(preCommitAfterUpsertHooks, preCommitHook)
	}
}

// One returns a single preCommit record from the query.
func (q preCommitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PreCommit, error) {
	o := &PreCommit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pre_commits")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PreCommit records from the query.
func (q preCommitQuery) All(ctx context.Context, exec boil.ContextExecutor) (PreCommitSlice, error) {
	var o []*PreCommit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PreCommit slice")
	}

	if len(preCommitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PreCommit records in the query.
func (q preCommitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pre_commits rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q preCommitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pre_commits exists")
	}

	return count > 0, nil
}

// Validator pointed to by the foreign key.
func (o *PreCommit) Validator(mods ...qm.QueryMod) validatorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"address\" = ?", o.ValidatorAddress),
	}

	queryMods = append(queryMods, mods...)

	query := Validators(queryMods...)
	queries.SetFrom(query.Query, "\"validators\"")

	return query
}

// LoadValidator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (preCommitL) LoadValidator(ctx context.Context, e boil.ContextExecutor, singular bool, maybePreCommit interface{}, mods queries.Applicator) error {
	var slice []*PreCommit
	var object *PreCommit

	if singular {
		object = maybePreCommit.(*PreCommit)
	} else {
		slice = *maybePreCommit.(*[]*PreCommit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &preCommitR{}
		}
		args = append(args, object.ValidatorAddress)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &preCommitR{}
			}

			for _, a := range args {
				if a == obj.ValidatorAddress {
					continue Outer
				}
			}

			args = append(args, obj.ValidatorAddress)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`validators`),
		qm.WhereIn(`validators.address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Validator")
	}

	var resultSlice []*Validator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Validator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for validators")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for validators")
	}

	if len(preCommitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Validator = foreign
		if foreign.R == nil {
			foreign.R = &validatorR{}
		}
		foreign.R.ValidatorAddressPreCommits = append(foreign.R.ValidatorAddressPreCommits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ValidatorAddress == foreign.Address {
				local.R.Validator = foreign
				if foreign.R == nil {
					foreign.R = &validatorR{}
				}
				foreign.R.ValidatorAddressPreCommits = append(foreign.R.ValidatorAddressPreCommits, local)
				break
			}
		}
	}

	return nil
}

// SetValidator of the preCommit to the related item.
// Sets o.R.Validator to related.
// Adds o to related.R.ValidatorAddressPreCommits.
func (o *PreCommit) SetValidator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Validator) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pre_commits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"validator_address"}),
		strmangle.WhereClause("\"", "\"", 2, preCommitPrimaryKeyColumns),
	)
	values := []interface{}{related.Address, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ValidatorAddress = related.Address
	if o.R == nil {
		o.R = &preCommitR{
			Validator: related,
		}
	} else {
		o.R.Validator = related
	}

	if related.R == nil {
		related.R = &validatorR{
			ValidatorAddressPreCommits: PreCommitSlice{o},
		}
	} else {
		related.R.ValidatorAddressPreCommits = append(related.R.ValidatorAddressPreCommits, o)
	}

	return nil
}

// PreCommits retrieves all the records using an executor.
func PreCommits(mods ...qm.QueryMod) preCommitQuery {
	mods = append(mods, qm.From("\"pre_commits\""))
	return preCommitQuery{NewQuery(mods...)}
}

// FindPreCommit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPreCommit(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PreCommit, error) {
	preCommitObj := &PreCommit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pre_commits\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, preCommitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pre_commits")
	}

	return preCommitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PreCommit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pre_commits provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(preCommitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	preCommitInsertCacheMut.RLock()
	cache, cached := preCommitInsertCache[key]
	preCommitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			preCommitAllColumns,
			preCommitColumnsWithDefault,
			preCommitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(preCommitType, preCommitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(preCommitType, preCommitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pre_commits\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pre_commits\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pre_commits")
	}

	if !cached {
		preCommitInsertCacheMut.Lock()
		preCommitInsertCache[key] = cache
		preCommitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PreCommit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PreCommit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	preCommitUpdateCacheMut.RLock()
	cache, cached := preCommitUpdateCache[key]
	preCommitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			preCommitAllColumns,
			preCommitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pre_commits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pre_commits\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, preCommitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(preCommitType, preCommitMapping, append(wl, preCommitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pre_commits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pre_commits")
	}

	if !cached {
		preCommitUpdateCacheMut.Lock()
		preCommitUpdateCache[key] = cache
		preCommitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q preCommitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pre_commits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pre_commits")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PreCommitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preCommitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pre_commits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, preCommitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in preCommit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all preCommit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PreCommit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pre_commits provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(preCommitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	preCommitUpsertCacheMut.RLock()
	cache, cached := preCommitUpsertCache[key]
	preCommitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			preCommitAllColumns,
			preCommitColumnsWithDefault,
			preCommitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			preCommitAllColumns,
			preCommitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pre_commits, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(preCommitPrimaryKeyColumns))
			copy(conflict, preCommitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pre_commits\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(preCommitType, preCommitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(preCommitType, preCommitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pre_commits")
	}

	if !cached {
		preCommitUpsertCacheMut.Lock()
		preCommitUpsertCache[key] = cache
		preCommitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PreCommit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PreCommit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PreCommit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), preCommitPrimaryKeyMapping)
	sql := "DELETE FROM \"pre_commits\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pre_commits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pre_commits")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q preCommitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no preCommitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pre_commits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pre_commits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PreCommitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(preCommitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preCommitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pre_commits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, preCommitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from preCommit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pre_commits")
	}

	if len(preCommitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PreCommit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPreCommit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PreCommitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PreCommitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preCommitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pre_commits\".* FROM \"pre_commits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, preCommitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PreCommitSlice")
	}

	*o = slice

	return nil
}

// PreCommitExists checks if the PreCommit row exists.
func PreCommitExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pre_commits\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pre_commits exists")
	}

	return exists, nil
}
